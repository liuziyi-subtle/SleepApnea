# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _c2py
else:
    import _c2py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cdata(ptr: "void *", nelements: "size_t"=1) -> "SWIGCDATA":
    return _c2py.cdata(ptr, nelements)

def memmove(data: "void *", indata: "void const *") -> "void":
    return _c2py.memmove(data, indata)
class float_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _c2py.float_array_swiginit(self, _c2py.new_float_array(nelements))
    __swig_destroy__ = _c2py.delete_float_array

    def __getitem__(self, index: "size_t") -> "float":
        return _c2py.float_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "float") -> "void":
        return _c2py.float_array___setitem__(self, index, value)

    def cast(self) -> "float *":
        return _c2py.float_array_cast(self)

    @staticmethod
    def frompointer(t: "float *") -> "float_array *":
        return _c2py.float_array_frompointer(t)

# Register float_array in _c2py:
_c2py.float_array_swigregister(float_array)

def float_array_frompointer(t: "float *") -> "float_array *":
    return _c2py.float_array_frompointer(t)

class int_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _c2py.int_array_swiginit(self, _c2py.new_int_array(nelements))
    __swig_destroy__ = _c2py.delete_int_array

    def __getitem__(self, index: "size_t") -> "int":
        return _c2py.int_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "int") -> "void":
        return _c2py.int_array___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _c2py.int_array_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "int_array *":
        return _c2py.int_array_frompointer(t)

# Register int_array in _c2py:
_c2py.int_array_swigregister(int_array)

def int_array_frompointer(t: "int *") -> "int_array *":
    return _c2py.int_array_frompointer(t)

MAX_LEN = _c2py.MAX_LEN
class DEBUG_TRACKER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x_interp = property(_c2py.DEBUG_TRACKER_x_interp_get, _c2py.DEBUG_TRACKER_x_interp_set)
    x_interp_len = property(_c2py.DEBUG_TRACKER_x_interp_len_get, _c2py.DEBUG_TRACKER_x_interp_len_set)
    y_interp = property(_c2py.DEBUG_TRACKER_y_interp_get, _c2py.DEBUG_TRACKER_y_interp_set)
    y_interp_len = property(_c2py.DEBUG_TRACKER_y_interp_len_get, _c2py.DEBUG_TRACKER_y_interp_len_set)
    y_interp_f = property(_c2py.DEBUG_TRACKER_y_interp_f_get, _c2py.DEBUG_TRACKER_y_interp_f_set)
    y_interp_f_len = property(_c2py.DEBUG_TRACKER_y_interp_f_len_get, _c2py.DEBUG_TRACKER_y_interp_f_len_set)
    welch_density = property(_c2py.DEBUG_TRACKER_welch_density_get, _c2py.DEBUG_TRACKER_welch_density_set)
    welch_density_len = property(_c2py.DEBUG_TRACKER_welch_density_len_get, _c2py.DEBUG_TRACKER_welch_density_len_set)
    peaks = property(_c2py.DEBUG_TRACKER_peaks_get, _c2py.DEBUG_TRACKER_peaks_set)
    peaks_len = property(_c2py.DEBUG_TRACKER_peaks_len_get, _c2py.DEBUG_TRACKER_peaks_len_set)
    peak_indices = property(_c2py.DEBUG_TRACKER_peak_indices_get, _c2py.DEBUG_TRACKER_peak_indices_set)
    peak_indices_len = property(_c2py.DEBUG_TRACKER_peak_indices_len_get, _c2py.DEBUG_TRACKER_peak_indices_len_set)
    ppg = property(_c2py.DEBUG_TRACKER_ppg_get, _c2py.DEBUG_TRACKER_ppg_set)
    ppg_len = property(_c2py.DEBUG_TRACKER_ppg_len_get, _c2py.DEBUG_TRACKER_ppg_len_set)
    ppg_f = property(_c2py.DEBUG_TRACKER_ppg_f_get, _c2py.DEBUG_TRACKER_ppg_f_set)
    ppg_f_len = property(_c2py.DEBUG_TRACKER_ppg_f_len_get, _c2py.DEBUG_TRACKER_ppg_f_len_set)
    breath_rates = property(_c2py.DEBUG_TRACKER_breath_rates_get, _c2py.DEBUG_TRACKER_breath_rates_set)
    breath_rates_len = property(_c2py.DEBUG_TRACKER_breath_rates_len_get, _c2py.DEBUG_TRACKER_breath_rates_len_set)
    rrs = property(_c2py.DEBUG_TRACKER_rrs_get, _c2py.DEBUG_TRACKER_rrs_set)
    rrs_len = property(_c2py.DEBUG_TRACKER_rrs_len_get, _c2py.DEBUG_TRACKER_rrs_len_set)

    def getitem_x_interp(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_x_interp(self, i)

    def getitem_y_interp(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_y_interp(self, i)

    def getitem_y_interp_f(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_y_interp_f(self, i)

    def getitem_peaks(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_peaks(self, i)

    def getitem_peak_indices(self, i: "size_t") -> "int32_t":
        return _c2py.DEBUG_TRACKER_getitem_peak_indices(self, i)

    def getitem_ppg(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_ppg(self, i)

    def getitem_ppg_f(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_ppg_f(self, i)

    def getitem_breath_rates(self, i: "size_t") -> "int32_t":
        return _c2py.DEBUG_TRACKER_getitem_breath_rates(self, i)

    def getitem_rrs(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_rrs(self, i)

    def getitem_welch_density(self, i: "size_t") -> "float":
        return _c2py.DEBUG_TRACKER_getitem_welch_density(self, i)

    def __init__(self):
        _c2py.DEBUG_TRACKER_swiginit(self, _c2py.new_DEBUG_TRACKER())
    __swig_destroy__ = _c2py.delete_DEBUG_TRACKER

# Register DEBUG_TRACKER in _c2py:
_c2py.DEBUG_TRACKER_swigregister(DEBUG_TRACKER)


def DebugInit() -> "void":
    return _c2py.DebugInit()

def GetPLOT() -> "struct DEBUG_TRACKER *":
    return _c2py.GetPLOT()

def BreathAnalysisInit() -> "void":
    return _c2py.BreathAnalysisInit()

def BreathAnalysis(s: "int *", sample_length: "uint32_t") -> "void":
    return _c2py.BreathAnalysis(s, sample_length)

cvar = _c2py.cvar

